/*******************************  COPYRIGHT  ********************************/
/*
 *  Author? "Gregory N. Leonhardt"
 *  License? "CC BY-NC 2.0"
 *           "https://creativecommons.org/licenses/by-nc/2.0/"
 *
 ****************************************************************************/

#ifndef MP3_LIB_H
#define MP3_LIB_H

/******************************** JAVADOC ***********************************/
/**
 *  This file contains private definitions (etc.) that apply to internal 
 *  library components of the 'mp3' library.
 *
 *  @note
 *
 ****************************************************************************/

/****************************************************************************
 *  Compiler directives
 ****************************************************************************/

//----------------------------------------------------------------------------
#ifdef ALLOC_MP3
   #define MP3_EXT
#else
   #define MP3_EXT              extern
#endif
//----------------------------------------------------------------------------

/****************************************************************************
 * System APIs
 ****************************************************************************/

                                //*******************************************
                                //*******************************************

/****************************************************************************
 * Application APIs
 ****************************************************************************/

                                //*******************************************
                                //*******************************************

/****************************************************************************
 * Library Private Definitions
 ****************************************************************************/

//----------------------------------------------------------------------------
/**
 *  @param  MP3__RDB_L          Size of the read data buffer
 * 
 *  @note   The important part here is that the data buffer is large enough
 *          to hold the entire ID3v2 tag area.  Bad things will happen if
 *          it isn't.                                                       */
#define MP3__RDB_L              ( 8192 * 1024 )
/**
 *  @param  MP3__READ_L         Read data length                            */
#define MP3__READ_L             ( 1024 )
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Structures
 ****************************************************************************/

//----------------------------------------------------------------------------
                                        //  3322 2222  2222 1111  1111 1100  0000 0000
                                        //  1098 7654  3210 9876  5432 1098  7654 3210
                                        //  ---- ----  ---- ----  ---- ----  ---- ----
#define	FRAME_SYNC_MASK 0xFFE00000	//  1111 1111  1110 0000  0000 0000  0000 0000
#define	MPEG_ID_MASK    0x00180000	//  0000 0000  0001 1000  0000 0000  0000 0000
    #define MPEG_25         0x00000000
    #define MPEG_RESERVED   0x00000001
    #define MPEG_2          0x00000002
    #define MPEG_1          0x00000003
#define	LAYER_MASK      0x00060000      //  0000 0000  0000 0110  0000 0000  0000 0000
    #define LAYER_RESERVED  0x00000000
    #define LAYER_3         0x00000001
    #define LAYER_2         0x00000002
    #define LAYER_1         0x00000003
#define	PROTECT_MASK    0x00010000      //  0000 0000  0000 0001  0000 0000  0000 0000
#define	BIT_RATE_MASK   0x0000F000      //  0000 0000  0000 0000  1111 0000  0000 0000
#define	SAMPLE_MASK     0x00000C00      //  0000 0000  0000 0000  0000 1100  0000 0000
    #define SAMPLE_RATE_0   0x00000000
    #define SAMPLE_RATE_1   0x00000001
    #define SAMPLE_RATE_2   0x00000002
    #define SAMPLE_RATE_3   0x00000003
#define	PAD_MASK        0x00000200      //  0000 0000  0000 0000  0000 0010  0000 0000
#define	PRIVATE_MASK    0x00000100      //  0000 0000  0000 0000  0000 0001  0000 0000
#define	CHANNEL_MASK    0x000000C0      //  0000 0000  0000 0000  0000 0000  1100 0000
    #define CHANNEL_STEREO  0x00000000
    #define CHANNEL_JSTEREO 0x00000040
    #define CHANNEL_DUAL    0x00000080
    #define CHANNEL_SINGLE  0x000000C0
#define	MODE_MASK       0x00000030      //  0000 0000  0000 0000  0000 0000  0011 0000
    #define Mode_0          0x00000000
    #define Mode_1          0x00000010
    #define Mode_2          0x00000020
    #define Mode_3          0x00000030
#define COPYRIGHT_MASK  0x00000008      //  0000 0000  0000 0000  0000 0000  0000 1000
    #define COPYRIGHT       0x00000008
#define ORIGINAL_MASK   0x00000004      //  0000 0000  0000 0000  0000 0000  0000 0100
    #define ORIGINAL        0x00000004
#define	EMPHASIS_MASK   0x00000003      //  0000 0000  0000 0000  0000 0000  0000 0011
    #define EMPHASIS_0      0x00000000
    #define EMPHASIS_1      0x00000001
    #define EMPHASIS_2      0x00000002
    #define EMPHASIS_3      0x00000003
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Storage Allocation
 ****************************************************************************/

//----------------------------------------------------------------------------
/**
 * @param   input_file_fp       Input File pointer                          */
MP3_EXT
FILE                        *   MP3__in_file_fp;
/**
 *  @param  MP3__rdb            Read Data Buffer                            */
MP3_EXT
uint8_t                         MP3__rdb[ MP3__RDB_L ];
/**
 *  @param  MP3__rdb_l          Read Data Buffer length                     */
MP3_EXT
size_t                          MP3__rdb_l;
/**
 *  @param  MP3__rdb_beg_p      Pointer to beginning Read Data Buffer       */
MP3_EXT
uint8_t                     *   MP3__rdb_beg_p;
/**
 *  @param  MP3__rdb_end_p      Pointer to end Read Data Buffer             */
MP3_EXT
uint8_t                     *   MP3__rdb_end_p;
/**
 *  @param  MP3__fingerprint    MP3 data fingerprint                        */
MP3_EXT
SHA1_CTX                        sha1_context;
uint8_t                     *   MP3__rdb_end_p;
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Prototypes
 ****************************************************************************/

//----------------------------------------------------------------------------
void
MP3__init(
    );
//----------------------------------------------------------------------------
int
MP3__fill_data_buffer(
    uint8_t                     *   file_name_p
    );
//----------------------------------------------------------------------------
int
MP3__remove_frame(
    int                             frame_l
    );
//----------------------------------------------------------------------------
int
MP3__sync_search(
    uint8_t                     *   frame_data_p,
    int                             frame_data_l
    );
//----------------------------------------------------------------------------
int
MP3__process_frame(
    uint8_t                     *   frame_data_p
    );
//----------------------------------------------------------------------------

/****************************************************************************/

#endif                      //    MP3_LIB_H
